Index: icecreamshop/src/test/java/com/summerschool/icecreamshop/controller/ProductControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.summerschool.icecreamshop.controller;\r\n\r\nimport com.summerschool.icecreamshop.dto.ProductDTO;\r\nimport com.summerschool.icecreamshop.model.Category;\r\nimport com.summerschool.icecreamshop.model.Product;\r\nimport com.summerschool.icecreamshop.model.Type;\r\nimport com.summerschool.icecreamshop.service.CategoryService;\r\nimport com.summerschool.icecreamshop.service.ProductService;\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\nimport org.mockito.InjectMocks;\r\nimport org.mockito.Mock;\r\nimport org.mockito.Mockito;\r\nimport org.modelmapper.ModelMapper;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\nimport static org.mockito.MockitoAnnotations.initMocks;\r\n\r\npublic class ProductControllerTest {\r\n\r\n    @Mock\r\n    ModelMapper modelMapper;\r\n\r\n    @Mock\r\n    ProductService productService;\r\n\r\n    @Mock\r\n    CategoryService categoryService;\r\n\r\n    @InjectMocks\r\n    ProductController productController;\r\n\r\n    List<Product> productsList;\r\n\r\n    Product product1 = new Product();\r\n\r\n    Product productPatch = new Product();\r\n\r\n    Category category1 = new Category();\r\n\r\n    ProductDTO productDTO = new ProductDTO();\r\n\r\n    @Before\r\n    public void setup() {\r\n        initMocks(this);\r\n\r\n        category1.setId(1L);\r\n        category1.setName(\"Gelato\");\r\n        category1.setDescription(\"Cool yourself on a hot summer day with our gelato!\");\r\n\r\n        product1.setId(1L);\r\n        product1.setTitle(\"Chocolate Mix Donuts\");\r\n        product1.setQuantity(100);\r\n        product1.setPrice(2.5);\r\n        product1.setType(Type.DONUTS);\r\n        product1.setCategory(category1);\r\n\r\n        productDTO.setTitle(\"Chocolate Mix Donuts\");\r\n        productDTO.setQuantity(100);\r\n        productDTO.setPrice(2.5);\r\n        productDTO.setType(Type.DONUTS);\r\n\r\n        productsList = new ArrayList<Product>();\r\n        productsList.add(product1);\r\n\r\n        productPatch.setId(1L);\r\n        productPatch.setTitle(\"test-title\");\r\n\r\n\r\n    }\r\n\r\n    @Test\r\n    public void testGetAllProducts() {\r\n        Mockito.when(productService.getAll())\r\n                .thenReturn(productsList);\r\n\r\n        ResponseEntity<List<ProductDTO>> response = productController.getProducts(null, null);\r\n\r\n        assertEquals(HttpStatus.OK, response.getStatusCode());\r\n    }\r\n\r\n    @Test\r\n    public void testGetProductsWithPagination() {\r\n        Mockito.when(productService.getProductsOfThePage(0, 5))\r\n                .thenReturn(productsList);\r\n\r\n        ResponseEntity<List<ProductDTO>> response = productController.getProducts(0, 5);\r\n\r\n        assertEquals(HttpStatus.OK, response.getStatusCode());\r\n    }\r\n\r\n    @Test\r\n    public void testServiceForAddProduct() {\r\n\r\n        Mockito.when(modelMapper.map(productDTO,Product.class))\r\n                .thenReturn(product1);\r\n        Mockito.when(categoryService.get(category1.getId()))\r\n                .thenReturn(Optional.of(category1));\r\n        Mockito.when(productService.add(product1))\r\n                .thenReturn(product1);\r\n        Mockito.when(modelMapper.map(product1, ProductDTO.class))\r\n                .thenReturn(productDTO);\r\n\r\n        ResponseEntity response = productController.add(category1.getId(), productDTO);\r\n        assertEquals(productDTO, response.getBody());\r\n    }\r\n\r\n    @Test\r\n    public void testPatchProduct() throws IllegalAccessException {\r\n\r\n        Mockito.when(productService.get(product1.getId())).thenReturn(Optional.of(product1));\r\n        Mockito.when((modelMapper.map(productDTO,Product.class))).thenReturn(productPatch);\r\n        product1.setTitle(productPatch.getTitle());\r\n        Mockito.when(productService.patch(product1,productPatch)).thenReturn(product1);\r\n\r\n        ResponseEntity<ProductDTO> p = productController.update(product1.getId(),productDTO);\r\n        assertEquals(p.getStatusCode(), HttpStatus.OK);\r\n    }\r\n}\r\n
===================================================================
diff --git a/icecreamshop/src/test/java/com/summerschool/icecreamshop/controller/ProductControllerTest.java b/icecreamshop/src/test/java/com/summerschool/icecreamshop/controller/ProductControllerTest.java
--- a/icecreamshop/src/test/java/com/summerschool/icecreamshop/controller/ProductControllerTest.java	
+++ b/icecreamshop/src/test/java/com/summerschool/icecreamshop/controller/ProductControllerTest.java	
@@ -46,6 +46,8 @@
 
     ProductDTO productDTO = new ProductDTO();
 
+    Product product;
+    ProductDTO productDTOTest;
     @Before
     public void setup() {
         initMocks(this);
@@ -72,6 +74,24 @@
         productPatch.setId(1L);
         productPatch.setTitle("test-title");
 
+        List<String> alergens = new ArrayList<String>();
+        List<String> urls = new ArrayList<String>();
+        List<String> ingredients = new ArrayList<String>();
+        alergens.add("alergen1");
+        alergens.add("alergen2");
+
+        urls.add("url1");
+        urls.add("url2");
+
+        ingredients.add("ing1");
+        ingredients.add("ing2");
+
+        Product product = new Product(100L, "title",
+                "shortDesc", "longDesc", ingredients, 1, alergens,
+                10, "RON", urls, Type.GELATO);
+        ProductDTO productDTOTest = new ProductDTO(100L, "title",
+                "shortDesc", "longDesc", ingredients, 1, alergens,
+                10, "RON", urls, Type.GELATO);
 
     }
 
@@ -122,4 +142,17 @@
         ResponseEntity<ProductDTO> p = productController.update(product1.getId(),productDTO);
         assertEquals(p.getStatusCode(), HttpStatus.OK);
     }
+
+    @Test
+    public void testGetProductAndModelMapper() {
+        Long id = 105L;
+        Mockito.when(modelMapper.map(productDTO, Product.class)).thenReturn(product);
+        Mockito.when(productService.get(id)).thenReturn(java.util.Optional.ofNullable(product));
+
+        ResponseEntity<ProductDTO> response = productController.get(id);
+        System.out.println(response.getStatusCode());
+        assertEquals(HttpStatus.OK, response.getStatusCode());
+    }
+
+
 }
